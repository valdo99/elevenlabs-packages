function A(){return A=Object.assign?Object.assign.bind():function(A){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)({}).hasOwnProperty.call(t,n)&&(A[n]=t[n])}return A},A.apply(null,arguments)}function e(A){const e=new Uint8Array(A);return window.btoa(String.fromCharCode(...e))}function t(A){const e=window.atob(A),t=e.length,n=new Uint8Array(t);for(let A=0;A<t;A++)n[A]=e.charCodeAt(A);return n.buffer}const n=new Blob(['\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            this.buffer = []; // Initialize an empty buffer\n            this.bufferSize = data.sampleRate / 4;\n            \n            if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n              globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                this.resampler = resampler;\n              });\n            } \n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel\'s data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let encodedArray = this.format === "ulaw"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === "ulaw") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor("raw-audio-processor", RawAudioProcessor);\n  '],{type:"application/javascript"}),a=URL.createObjectURL(n);function s(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}class o{static async create({sampleRate:A,format:e,preferHeadphonesForIosDevices:t}){let n=null,i=null;try{const r={sampleRate:{ideal:A},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}};if(s()&&t){const A=(await window.navigator.mediaDevices.enumerateDevices()).find(A=>"audioinput"===A.kind&&["airpod","headphone","earphone"].find(e=>A.label.toLowerCase().includes(e)));A&&(r.deviceId={ideal:A.deviceId})}const l=navigator.mediaDevices.getSupportedConstraints().sampleRate;n=new window.AudioContext(l?{sampleRate:A}:{});const c=n.createAnalyser();l||await n.audioWorklet.addModule("https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js"),await n.audioWorklet.addModule(a),i=await navigator.mediaDevices.getUserMedia({audio:r});const u=n.createMediaStreamSource(i),d=new AudioWorkletNode(n,"raw-audio-processor");return d.port.postMessage({type:"setFormat",format:e,sampleRate:A}),u.connect(c),c.connect(d),await n.resume(),new o(n,c,d,i)}catch(A){var r,l;throw null==(r=i)||r.getTracks().forEach(A=>A.stop()),null==(l=n)||l.close(),A}}constructor(A,e,t,n){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=A,this.analyser=e,this.worklet=t,this.inputStream=n}async close(){this.inputStream.getTracks().forEach(A=>A.stop()),await this.context.close()}}const i=new Blob(['\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case "setFormat":\n                this.format = data.format;\n                break;\n              case "buffer":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === "ulaw"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case "interrupt":\n                this.wasInterrupted = true;\n                break;\n              case "clearInterrupted":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === "ulaw") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: "process", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor("audio-concat-processor", AudioConcatProcessor);\n    '],{type:"application/javascript"}),r=URL.createObjectURL(i);class l{static async create({sampleRate:A,format:e}){let t=null;try{t=new AudioContext({sampleRate:A});const n=t.createAnalyser(),a=t.createGain();a.connect(n),n.connect(t.destination),await t.audioWorklet.addModule(r);const s=new AudioWorkletNode(t,"audio-concat-processor");return s.port.postMessage({type:"setFormat",format:e}),s.connect(a),await t.resume(),new l(t,n,a,s)}catch(A){var n;throw null==(n=t)||n.close(),A}}constructor(A,e,t,n){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=A,this.analyser=e,this.gain=t,this.worklet=n}async close(){await this.context.close()}}function c(A){return!!A.type}class u{static async create(A){let e=null;try{var t;const n=null!=(t=A.origin)?t:"wss://api.elevenlabs.io",a=A.signedUrl?A.signedUrl:n+"/v1/convai/conversation?agent_id="+A.agentId,s=["convai"];A.authorization&&s.push(`bearer.${A.authorization}`),e=new WebSocket(a,s);const o=await new Promise((t,n)=>{e.addEventListener("open",()=>{var t;const n={type:"conversation_initiation_client_data"};var a,s,o,i;A.overrides&&(n.conversation_config_override={agent:{prompt:null==(a=A.overrides.agent)?void 0:a.prompt,first_message:null==(s=A.overrides.agent)?void 0:s.firstMessage,language:null==(o=A.overrides.agent)?void 0:o.language},tts:{voice_id:null==(i=A.overrides.tts)?void 0:i.voiceId}}),A.customLlmExtraBody&&(n.custom_llm_extra_body=A.customLlmExtraBody),A.dynamicVariables&&(n.dynamic_variables=A.dynamicVariables),null==(t=e)||t.send(JSON.stringify(n))},{once:!0}),e.addEventListener("error",A=>{setTimeout(()=>n(A),0)}),e.addEventListener("close",n),e.addEventListener("message",A=>{const e=JSON.parse(A.data);c(e)&&("conversation_initiation_metadata"===e.type?t(e.conversation_initiation_metadata_event):console.warn("First received message is not conversation metadata."))},{once:!0})}),{conversation_id:i,agent_output_audio_format:r,user_input_audio_format:l}=o,h=d(null!=l?l:"pcm_16000"),p=d(r);return new u(e,i,h,p)}catch(A){var n;throw null==(n=e)||n.close(),A}}constructor(A,e,t,n){this.socket=void 0,this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.queue=[],this.disconnectionDetails=null,this.onDisconnectCallback=null,this.onMessageCallback=null,this.socket=A,this.conversationId=e,this.inputFormat=t,this.outputFormat=n,this.socket.addEventListener("error",A=>{setTimeout(()=>this.disconnect({reason:"error",message:"The connection was closed due to a socket error.",context:A}),0)}),this.socket.addEventListener("close",A=>{this.disconnect(1e3===A.code?{reason:"agent",context:A}:{reason:"error",message:A.reason||"The connection was closed by the server.",context:A})}),this.socket.addEventListener("message",A=>{try{const e=JSON.parse(A.data);if(!c(e))return;this.onMessageCallback?this.onMessageCallback(e):this.queue.push(e)}catch(A){}})}close(){this.socket.close()}sendMessage(A){this.socket.send(JSON.stringify(A))}onMessage(A){this.onMessageCallback=A,this.queue.forEach(A),this.queue=[]}onDisconnect(A){this.onDisconnectCallback=A,this.disconnectionDetails&&A(this.disconnectionDetails)}disconnect(A){var e;this.disconnectionDetails||(this.disconnectionDetails=A,null==(e=this.onDisconnectCallback)||e.call(this,A))}}function d(A){const[e,t]=A.split("_");if(!["pcm","ulaw"].includes(e))throw new Error(`Invalid format: ${A}`);const n=parseInt(t);if(isNaN(n))throw new Error(`Invalid sample rate: ${t}`);return{format:e,sampleRate:n}}const h={clientTools:{}},p={onConnect:()=>{},onDebug:()=>{},onDisconnect:()=>{},onError:()=>{},onMessage:()=>{},onModeChange:()=>{},onStatusChange:()=>{},onCanSendFeedbackChange:()=>{}};class g{static async startSession(e){const t=A({},h,p,e);t.onStatusChange({status:"connecting"}),t.onCanSendFeedbackChange({canSendFeedback:!1});let n=null,a=null,i=null,r=null;try{var c,d;r=await navigator.mediaDevices.getUserMedia({audio:!0});const h=null!=(c=e.connectionDelay)?c:{default:0,android:3e3};let p=h.default;var m;if(/android/i.test(navigator.userAgent))p=null!=(m=h.android)?m:p;else if(s()){var B;p=null!=(B=h.ios)?B:p}return p>0&&await new Promise(A=>setTimeout(A,p)),a=await u.create(e),[n,i]=await Promise.all([o.create(A({},a.inputFormat,{preferHeadphonesForIosDevices:e.preferHeadphonesForIosDevices})),l.create(a.outputFormat)]),null==(d=r)||d.getTracks().forEach(A=>A.stop()),r=null,new g(t,a,n,i)}catch(A){var C,f,w,E;throw t.onStatusChange({status:"disconnected"}),null==(C=r)||C.getTracks().forEach(A=>A.stop()),null==(f=a)||f.close(),await(null==(w=n)?void 0:w.close()),await(null==(E=i)?void 0:E.close()),A}}constructor(A,n,a,s){var o=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.lastInterruptTimestamp=0,this.mode="listening",this.status="connecting",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.currentEventId=1,this.lastFeedbackEventId=1,this.canSendFeedback=!1,this.endSession=()=>this.endSessionWithDetails({reason:"user"}),this.endSessionWithDetails=async function(A){"connected"!==o.status&&"connecting"!==o.status||(o.updateStatus("disconnecting"),o.connection.close(),await o.input.close(),await o.output.close(),o.updateStatus("disconnected"),o.options.onDisconnect(A))},this.updateMode=A=>{A!==this.mode&&(this.mode=A,this.options.onModeChange({mode:A}))},this.updateStatus=A=>{A!==this.status&&(this.status=A,this.options.onStatusChange({status:A}))},this.updateCanSendFeedback=()=>{const A=this.currentEventId!==this.lastFeedbackEventId;this.canSendFeedback!==A&&(this.canSendFeedback=A,this.options.onCanSendFeedbackChange({canSendFeedback:A}))},this.onMessage=async function(A){switch(A.type){case"interruption":A.interruption_event&&(o.lastInterruptTimestamp=A.interruption_event.event_id),o.fadeOutAudio();break;case"agent_response":o.options.onMessage({source:"ai",message:A.agent_response_event.agent_response});break;case"user_transcript":o.options.onMessage({source:"user",message:A.user_transcription_event.user_transcript});break;case"internal_tentative_agent_response":o.options.onDebug({type:"tentative_agent_response",response:A.tentative_agent_response_internal_event.tentative_agent_response});break;case"client_tool_call":if(o.options.clientTools.hasOwnProperty(A.client_tool_call.tool_name)){try{var e;const t=null!=(e=await o.options.clientTools[A.client_tool_call.tool_name](A.client_tool_call.parameters))?e:"Client tool execution successful.";o.connection.sendMessage({type:"client_tool_result",tool_call_id:A.client_tool_call.tool_call_id,result:t,is_error:!1})}catch(e){o.onError("Client tool execution failed with following error: "+(null==e?void 0:e.message),{clientToolName:A.client_tool_call.tool_name}),o.connection.sendMessage({type:"client_tool_result",tool_call_id:A.client_tool_call.tool_call_id,result:"Client tool execution failed: "+(null==e?void 0:e.message),is_error:!0})}break}if(o.options.onUnhandledClientToolCall){o.options.onUnhandledClientToolCall(A.client_tool_call);break}o.onError(`Client tool with name ${A.client_tool_call.tool_name} is not defined on client`,{clientToolName:A.client_tool_call.tool_name}),o.connection.sendMessage({type:"client_tool_result",tool_call_id:A.client_tool_call.tool_call_id,result:`Client tool with name ${A.client_tool_call.tool_name} is not defined on client`,is_error:!0});break;case"audio":o.lastInterruptTimestamp<=A.audio_event.event_id&&(o.addAudioBase64Chunk(A.audio_event.audio_base_64),o.currentEventId=A.audio_event.event_id,o.updateCanSendFeedback(),o.updateMode("speaking"));break;case"ping":o.addAudioBase64Chunk(""),o.updateMode("speaking");break;default:o.options.onDebug(A)}},this.onInputWorkletMessage=A=>{"connected"===this.status&&this.connection.sendMessage({user_audio_chunk:e(A.data[0].buffer)})},this.onOutputWorkletMessage=({data:A})=>{"process"===A.type&&this.updateMode(A.finished?"listening":"speaking")},this.addAudioBase64Chunk=A=>{this.output.gain.gain.value=this.volume,this.output.worklet.port.postMessage({type:"clearInterrupted"}),this.output.worklet.port.postMessage({type:"buffer",buffer:t(A)})},this.fadeOutAudio=()=>{this.updateMode("listening"),this.output.worklet.port.postMessage({type:"interrupt"}),this.output.gain.gain.exponentialRampToValueAtTime(1e-4,this.output.context.currentTime+2),setTimeout(()=>{this.output.gain.gain.value=this.volume,this.output.worklet.port.postMessage({type:"clearInterrupted"})},2e3)},this.onError=(A,e)=>{console.error(A,e),this.options.onError(A,e)},this.calculateVolume=A=>{if(0===A.length)return 0;let e=0;for(let t=0;t<A.length;t++)e+=A[t]/255;return e/=A.length,e<0?0:e>1?1:e},this.getId=()=>this.connection.conversationId,this.isOpen=()=>"connected"===this.status,this.setVolume=({volume:A})=>{this.volume=A},this.getInputByteFrequencyData=()=>(null!=this.inputFrequencyData||(this.inputFrequencyData=new Uint8Array(this.input.analyser.frequencyBinCount)),this.input.analyser.getByteFrequencyData(this.inputFrequencyData),this.inputFrequencyData),this.getOutputByteFrequencyData=()=>(null!=this.outputFrequencyData||(this.outputFrequencyData=new Uint8Array(this.output.analyser.frequencyBinCount)),this.output.analyser.getByteFrequencyData(this.outputFrequencyData),this.outputFrequencyData),this.getInputVolume=()=>this.calculateVolume(this.getInputByteFrequencyData()),this.getOutputVolume=()=>this.calculateVolume(this.getOutputByteFrequencyData()),this.sendFeedback=A=>{this.canSendFeedback?(this.connection.sendMessage({type:"feedback",score:A?"like":"dislike",event_id:this.currentEventId}),this.lastFeedbackEventId=this.currentEventId,this.updateCanSendFeedback()):console.warn(0===this.lastFeedbackEventId?"Cannot send feedback: the conversation has not started yet.":"Cannot send feedback: feedback has already been sent for the current response.")},this.options=A,this.connection=n,this.input=a,this.output=s,this.options.onConnect({conversationId:n.conversationId}),this.connection.onDisconnect(this.endSessionWithDetails),this.connection.onMessage(this.onMessage),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus("connected")}}function m(A,e,t="https://api.elevenlabs.io"){return fetch(`${t}/v1/convai/conversations/${A}/feedback`,{method:"POST",body:JSON.stringify({feedback:e?"like":"dislike"}),headers:{"Content-Type":"application/json"}})}export{g as Conversation,m as postOverallFeedback};
//# sourceMappingURL=lib.modern.js.map
